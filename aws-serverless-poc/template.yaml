AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless POC - API Gateway -> SQS -> Lambda -> DynamoDB -> Streams -> Lambda -> SNS

Parameters:
  EmailSubscription:
    Type: String
    Description: Email address to subscribe to SNS notifications

Globals:
  Function:
    Runtime: python3.12
    Timeout: 30
    MemorySize: 256
    Tracing: Active
    Architectures: [x86_64]
    Environment:
      Variables:
        DDB_TABLE: !Ref OrdersTable
        ORDER_ID_FIELD: orderID

Resources:

  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: orders
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: orderID
          AttributeType: S
      KeySchema:
        - AttributeName: orderID
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  OrdersTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: POC-Topic

  OrdersTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref OrdersTopic
      Protocol: email
      Endpoint: !Ref EmailSubscription

  POCQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: POC-Queue-DLQ

  POCQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: POC-Queue
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt POCQueueDLQ.Arn
        maxReceiveCount: 5

  LambdaSQSToDDB:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: POC-Lambda-1
      CodeUri: src/
      Handler: lambda_sqs_to_ddb.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable
        - SQSPollerPolicy:
            QueueName: !GetAtt POCQueue.QueueName
      Events:
        FromSQS:
          Type: SQS
          Properties:
            Queue: !GetAtt POCQueue.Arn
            BatchSize: 5
            Enabled: true

  LambdaStreamToSNS:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: POC-Lambda-2
      CodeUri: src/
      Handler: lambda_stream_to_sns.lambda_handler
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref OrdersTopic
      Policies:
        - DynamoDBStreamReadPolicy:
            TableName: !Ref OrdersTable
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt OrdersTopic.TopicName
      Events:
        FromDDBStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt OrdersTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 10
            Enabled: true

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: POC-API
      StageName: prod
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          LoggingLevel: INFO
          DataTraceEnabled: true
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "POC-API"
          version: "1.0"
        schemes:
          - https
        paths:
          /order:
            post:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: "OK"
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/${POCQueueName}
                credentials:
                  Fn::GetAtt: [ApiGatewayRole, Arn]
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
                requestTemplates:
                  application/json: |
                    Action=SendMessage&MessageBody=$util.urlEncode($input.body)
                responses:
                  default:
                    statusCode: "200"
        x-amazon-apigateway-binary-media-types:
          - application/json

  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: APIGateway-SQS
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SendMessageToPOCQueue
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt POCQueue.Arn
        - PolicyName: PushToCWLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

Outputs:
  ApiInvokeUrl:
    Description: Invoke URL for POST /order (prod)
    Value:
      Fn::Sub: https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/order
  QueueUrl:
    Description: URL of SQS queue
    Value: !Ref POCQueue
  TableName:
    Description: DynamoDB table name
    Value: !Ref OrdersTable
  SnsTopicArn:
    Description: SNS topic ARN
    Value: !Ref OrdersTopic
  POCQueueName:
    Description: POC Queue name for Swagger Sub
    Value: !GetAtt POCQueue.QueueName
